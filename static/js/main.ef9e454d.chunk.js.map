{"version":3,"sources":["components/Person.js","components/date/Settings.js","components/date/DateMgmt.js","components/inputs/InputMgmt.js","App.js","serviceWorker.js","index.js"],"names":["person","props","onClick","onNameClick","name","age","value","onChange","onNameInputChange","settings","handleIncrement","handleDecrement","DateMgmt","state","day","Date","getDate","month","toLocaleString","monthNo","getMonth","lastDayCrMonth","lastDayPreviousMonth","previousMonth","nextMonth","newDay","setState","date","getFullYear","this","Settings","Component","InputMgmt","email","phone","nameChangeHandler","event","target","emailChangeHandler","phoneChangeHandler","App","persons","id","info","title","inputText","addPersonHandler","nameClickHandler","console","log","inputChangeHandler","nameInputChangeHandler","find","className","map","Person","key","bind","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef9e454d.chunk.js","sourcesContent":["import React from 'react';\n\nconst person = (props) => {\n\treturn (\n\t\t<div>\n\t\t\t<p>\n\t\t\t\tHello, I'm <span onClick={props.onNameClick}>{props.name}</span> and I'm {props.age} years old.\n\t\t\t</p>\n\t\t\t<input value={props.name} onChange={props.onNameInputChange} />\n\t\t</div>\n\t);\n};\n\nexport default person;\n","import React, { Fragment } from 'react';\n\nconst settings = (props) => {\n\treturn (\n\t\t<Fragment>\n\t\t\t<p>\n\t\t\t\t<button onClick={props.handleIncrement}>IncrementD</button>\n\t\t\t\t<button onClick={props.handleDecrement}>DecrementD</button>\n\t\t\t</p>\n\t\t</Fragment>\n\t);\n};\n\nexport default settings;\n","import React, { Component } from 'react';\nimport Settings from './Settings';\n\nclass DateMgmt extends Component {\n\tstate = {\n\t\tday: new Date().getDate(),\n\t\t// day: 30,\n\t\tmonth: new Date().toLocaleString('default', { month: 'long' }),\n\t\tmonthNo: new Date().getMonth(),\n\t\tlastDayCrMonth: 0,\n\t\tlastDayPreviousMonth: 0,\n\t\tpreviousMonth: '',\n\t\tnextMonth: ''\n\t};\n\n\tcomponentDidMount() {\n\t\tconst date = new Date();\n\t\t// Day 0 is the last day in the previous month\n\t\tconst lastDayPreviousMonth = new Date(date.getFullYear(), date.getMonth(), 0).getDate();\n\t\tconst lastDayCrMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\t\tconst previousMonth = new Date(date.getFullYear(), date.getMonth() - 1).toLocaleString('default', {\n\t\t\tmonth: 'long'\n\t\t});\n\t\tconst nextMonth = new Date(date.getFullYear(), date.getMonth() + 1).toLocaleString('default', {\n\t\t\tmonth: 'long'\n\t\t});\n\t\tthis.setState({ lastDayCrMonth, lastDayPreviousMonth, previousMonth, nextMonth });\n\t}\n\n\thandleIncrement = () => {\n\t\tconst newDay = this.state.day + 1;\n\t\tnewDay > this.state.lastDayCrMonth\n\t\t\t? this.setState((state) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tday: 1,\n\t\t\t\t\t\tpreviousMonth: state.month,\n\t\t\t\t\t\tmonth: state.nextMonth\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t: this.setState((state) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tday: newDay\n\t\t\t\t\t};\n\t\t\t\t});\n\t};\n\n\thandleDecrement = () => {\n\t\tconst newDay = this.state.day - 1;\n\t\tnewDay === 0\n\t\t\t? this.setState((state) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tday: state.lastDayPreviousMonth,\n\t\t\t\t\t\tnextMonth: state.month,\n\t\t\t\t\t\tmonth: state.previousMonth\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t: this.setState((state) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tday: newDay\n\t\t\t\t\t};\n\t\t\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\tDate (day-month): {this.state.day} - {this.state.month}\n\t\t\t\t<Settings handleIncrement={this.handleIncrement} handleDecrement={this.handleDecrement} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default DateMgmt;\n","import React, { Component, Fragment } from 'react';\n\nclass InputMgmt extends Component {\n\tstate = {\n\t\tname: '',\n\t\temail: '',\n\t\tphone: ''\n\t};\n\n\tnameChangeHandler = (event) => {\n\t\tthis.setState({ name: event.target.value });\n\t};\n\temailChangeHandler = (event) => {\n\t\tthis.setState({ email: event.target.value });\n\t};\n\tphoneChangeHandler = (event) => {\n\t\tthis.setState({ phone: event.target.value });\n\t};\n\n\trender() {\n\t\tconst { name, email, phone } = this.state;\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<p>\n\t\t\t\t\t<label>Name: </label>\n\t\t\t\t\t<input value={name} onChange={this.nameChangeHandler} />\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t<label>Email: </label>\n\t\t\t\t\t<input value={email} onChange={this.emailChangeHandler} />\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t<label>Phone: </label>\n\t\t\t\t\t<input value={phone} onChange={this.phoneChangeHandler} />\n\t\t\t\t</p>\n\n\t\t\t\t<p>\n\t\t\t\t\tName: {name} - Email: {email} - Phone: {phone}\n\t\t\t\t</p>\n\t\t\t</Fragment>\n\t\t);\n\t}\n}\n\nexport default InputMgmt;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Person from './components/Person';\nimport DateMgmt from './components/date/DateMgmt';\nimport InputMgmt from './components/inputs/InputMgmt';\n\nclass App extends Component {\n\tstate = {\n\t\tpersons: [\n\t\t\t{ id: 1, name: 'Ana', age: 20 },\n\t\t\t{ id: 2, name: 'Maria', age: 25, info: 'My hobbies are reading and hiking.' }\n\t\t],\n\t\ttitle: 'My React App',\n\t\tinputText: 'Initial text'\n\t};\n\n\taddPersonHandler = () => {\n\t\tthis.setState({\n\t\t\tpersons: [ ...this.state.persons, { name: 'Grigore', age: 75, info: \"Reaching the end... :'(\" } ]\n\t\t});\n\t};\n\n\tnameClickHandler = (name) => {\n\t\tconsole.log('name clicked: ', name);\n\t};\n\n\tinputChangeHandler = (event) => {\n\t\tthis.setState({ inputText: event.target.value });\n\t};\n\n\tnameInputChangeHandler = (event, id) => {\n\t\tconst persons = [ ...this.state.persons ];\n\t\tconst changedPerson = persons.find((person) => person.id === id);\n\t\tchangedPerson.name = event.target.value;\n\n\t\tthis.setState({ persons });\n\t};\n\n\trender() {\n\t\tconst { persons, title, inputText } = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>{title}</h1>\n\t\t\t\t<input value={inputText} onChange={this.inputChangeHandler} />\n\t\t\t\t<p> {inputText}</p>\n\t\t\t\t<button onClick={this.addPersonHandler}>Add Person</button>\n\t\t\t\t{persons.map((person) => (\n\t\t\t\t\t<Person\n\t\t\t\t\t\tkey={person.id}\n\t\t\t\t\t\tname={person.name}\n\t\t\t\t\t\tage={person.age}\n\t\t\t\t\t\tonNameClick={this.nameClickHandler.bind(this, person.name)}\n\t\t\t\t\t\tonNameInputChange={(event) => this.nameInputChangeHandler(event, person.id)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<p>{person.info}</p>\n\t\t\t\t\t</Person>\n\t\t\t\t))}\n\t\t\t\t<hr />\n\t\t\t\t<h2>Homework Session 4</h2>\n\t\t\t\t<h3>Exercise 1</h3>\n\t\t\t\t<DateMgmt />\n\t\t\t\t<h3>Exercise 2</h3>\n\t\t\t\t<InputMgmt />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}